{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "ESLint",
          "version": "8.0.0",
          "informationUri": "https://eslint.org"
        }
      },
      "results": [
        {
          "ruleId": "no-unused-vars",
          "level": "warning",
          "message": {
            "text": "'unusedVariable' is assigned a value but never used."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/components/App.tsx"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 7,
                  "endLine": 15,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "prefer-const",
          "level": "error",
          "message": {
            "text": "'let' is disallowed. Use 'const' instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/utils/helpers.ts"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 5,
                  "endLine": 8,
                  "endColumn": 8
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-console",
          "level": "info",
          "message": {
            "text": "Unexpected console statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/components/Header.tsx"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 3,
                  "endLine": 12,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-undef",
          "level": "error",
          "message": {
            "text": "'undefinedVariable' is not defined."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/components/App.tsx"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 15,
                  "endLine": 22,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "no-empty-function",
          "level": "warning",
          "message": {
            "text": "Empty function."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/utils/helpers.ts"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 2
                }
              }
            }
          ]
        }
      ],
      "artifacts": [
        {
          "location": {
            "uri": "src/components/App.tsx"
          },
          "contents": {
            "text": "import React from 'react';\nimport { useState } from 'react';\n\ninterface AppProps {\n  title: string;\n}\n\nconst App: React.FC<AppProps> = ({ title }) => {\n  const [count, setCount] = useState(0);\n  const unusedVariable = 'this is not used';\n  \n  const handleClick = () => {\n    setCount(count + 1);\n    console.log('Button clicked');\n  };\n  \n  return (\n    <div>\n      <h1>{title}</h1>\n      <p>Count: {count}</p>\n      <button onClick={handleClick}>\n        Click me {undefinedVariable}\n      </button>\n    </div>\n  );\n};\n\nexport default App;"
          }
        },
        {
          "location": {
            "uri": "src/utils/helpers.ts"
          },
          "contents": {
            "text": "export const formatDate = (date: Date): string => {\n  let formatted = date.toISOString();\n  return formatted.split('T')[0];\n};\n\nexport const validateEmail = (email: string): boolean => {\n  const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return regex.test(email);\n};\n\nexport const emptyFunction = () => {\n  // This function is empty\n};\n\nexport const processData = (data: any[]) => {\n  return data.filter(item => item.active);\n};"
          }
        },
        {
          "location": {
            "uri": "src/components/Header.tsx"
          },
          "contents": {
            "text": "import React from 'react';\n\ninterface HeaderProps {\n  title: string;\n}\n\nconst Header: React.FC<HeaderProps> = ({ title }) => {\n  console.log('Header rendered');\n  \n  return (\n    <header>\n      <h1>{title}</h1>\n    </header>\n  );\n};\n\nexport default Header;"
          }
        }
      ]
    }
  ]
} 